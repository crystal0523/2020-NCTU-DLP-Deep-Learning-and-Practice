
import math
import time

import torch
from nltk.translate.bleu_score import SmoothingFunction, sentence_bleu
import os
_PATH = os.path.dirname(os.path.abspath(__file__))+"/train.txt"
SOS_token, EOS_token = 0, 1


def word2tensor(word):
    #to ASCII
    return torch.Tensor([SOS_token]+[ord(c)-ord("a")+2 for c in word]+[EOS_token]).long()


def tensor2word(tensor):
    return ''.join([chr(asc+ord("a")-2) for asc in tensor if asc > 1])

def Gaussian_score(words):
    #print(words)
    words_list = []
    score = 0
    #yourpath = ''
    with open(_PATH,'r') as fp:
        for line in fp:
            word = line.split(' ')
            word[3] = word[3].strip('\n')
            print(word[3])
            words_list.extend([word])
        #print(words_list)
        for t in words:
            for i in words_list:
                for index in i:
                    if t == index:
                        #print('t ',t,'index:',index)
                        score += 1
                    
    return score/len(words)

#type to one hot vector
def idx2onehot(idx, n):
    def setpos(idx):
        assert idx < n
        onehot = torch.zeros(n)
        onehot[idx] = 1
        return onehot

    if type(idx) == int:
        return setpos(idx)

    return torch.stack([setpos(i) for i in idx])


def get_output(Pred):
    output = []
    for i in range(len(Pred)):
        topi = Pred[i].topk(1)[1]
        out = topi.squeeze().detach()
        output.append(out)
    return output

#compute BLEU-4 score
#The target word
#reference = 'accessed'
#The word generated by your model
#output = 'access'
def compute_bleu(output, reference):
    if type(reference) != list:
        reference = [reference]
    cc = SmoothingFunction()
    return sentence_bleu(reference, output, weights=(0.25, 0.25, 0.25, 0.25), smoothing_function=cc.method1)


def asMinutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)


def timeSince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s(- %s)' % (asMinutes(s), asMinutes(rs))


if __name__ == "__main__":
    # print(compute_bleu("abducts", [
    #       "abduct", "abducts", "abducting", "abducted"]))
    print(idx2onehot([1, 2, 3], 4))
    n=Gaussian_score(words=['intend', 'intends', 'intending', 'intended'])
    print(n)